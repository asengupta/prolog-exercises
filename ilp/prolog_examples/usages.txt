vm([
        mvc(reg(f), const(5)), 
        label("LOOP"), 
        term("Looping"), 
        dec(reg(f)), 
        cmp(reg(f),const(0)), 
        jnz(label("LOOP")), 
        j(label("SOME_LABEL")),
        term("-------------------------Done"),
        label("SOME_LABEL"),
        push(const(42)),
        pop(reg(lol)),
        call(label("MYSUB")),
        term("Returned from MYSUB"),
        push(const(22)),
        hlt,
        label("MYSUB"),
        term("SHOULD NOT COME HERE------------------------------"),
        ret
        ],
FinalTrace, FinalIP, FinalStack, FinalCallStack, FinalRegs, Flag).

vm([
    mvc(reg(r1), const(1)),               % r1 := 1
    call(label(foo)),             % call foo
    mvc(reg(r4), const(4)),              % r4 := 4 (after all returns)
    mul(reg(r4),reg(r5)),
    hlt,

    label(foo),
    mvc(reg(r2), const(2)),              % r2 := 2
    call(label(bar)),             % nested call
    mvc(reg(r5), const(5)),              % r5 := 5 (after returning from bar)
    term("In foo"),
    ret,                          % return to main

    label(bar),
    mvc(reg(r3), const(3)),              % r3 := 3
    term("In bar"),
    ret                           % return to foo
],
FinalTrace, FinalIP, FinalStack, FinalCallStack, FinalRegs, Flag).


vm([
     mvc(reg(r0),const(5)),
     mvc(reg(r1),const(1)),
     call(label(factorial)),
     push(const(30)),
     cmp(reg(r1),const(121)),
     hlt,
     label(factorial),
     cmp(reg(r0),const(0)),
     jz(label(base)),
     push(reg(r0)),
     dec(reg(r0)),
     call(label(factorial)),
     pop(reg(r0)),
     mul(reg(r1),reg(r0)),
     ret,

     label(base),
     mvc(reg(r1),const(1)),
     ret
],
FinalTrace, FinalIP, FinalStack, FinalCallStack, FinalRegs, Flag).

vm([
    label(main),
    call(label(func1)),
    hlt,

    label(func1),
    term('In func1'),
    call(label(func2)),
    push(1),       % pushed after returning from func2
    ret,

    label(func2),
    term('In func2'),
    push(2),
    ret
],
FinalTrace, FinalIP, FinalStack, FinalCallStack, FinalRegs, Flag).


execute_symbolic([
        mvc(reg(f),sym(a)), 
        label("LOOP"), 
        term("Looping"),
        cmp(reg(f),const(5)),
        jz(label(myjmp)),
        hlt,
        label(myjmp),
        term("In myjmp"),
        hlt
        ],
AllWorlds).
